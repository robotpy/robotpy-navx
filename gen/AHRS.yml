---

extra_includes:
- wpi/sendable/SendableHelper.h

inline_code: |
  #include <src/rpy/AHRS.cpp.inl>

classes:
  AHRS:
    shared_ptr: true
    ignored_bases:
    - wpi::SendableHelper<AHRS>
    enums:
      BoardAxis:
      SerialDataType:
    methods:
      AHRS:
        overloads:
          frc::SPI::Port:
          frc::I2C::Port:
          frc::SerialPort::Port:
          frc::SPI::Port, uint8_t:
          frc::SPI::Port, uint32_t, uint8_t:
          frc::I2C::Port, uint8_t:
          frc::SerialPort::Port, AHRS::SerialDataType, uint8_t:
      GetPitch:
        doc: |
          Returns the current pitch value (in degrees, from -180 to 180)
          reported by the sensor.  Pitch is a measure of rotation around
          the X Axis.

          :returns: The current pitch value in degrees (-180 to 180).
      GetRoll:
        doc: |
          Returns the current roll value (in degrees, from -180 to 180)
          reported by the sensor.  Roll is a measure of rotation around
          the X Axis.

          :returns: The current roll value in degrees (-180 to 180).
      GetYaw:
        doc: |
          Returns the current yaw value (in degrees, from -180 to 180)
          reported by the sensor.  Yaw is a measure of rotation around
          the Z Axis (which is perpendicular to the earth).

          Note that the returned yaw value will be offset by a user-specified
          offset value this user-specified offset value is set by
          invoking the zeroYaw() method.

          :returns: The current yaw value in degrees (-180 to 180).
      GetRotation2d:
        doc: |
          Return the heading of the robot as a Rotation2d.

          The angle is continuous, that is it will continue from 360 to 361 degrees.
          This allows algorithms that wouldn't want to see a discontinuity in the
          gyro output as it sweeps past from 360 to 0 on the second time around.

          The angle is expected to increase as the gyro turns counterclockwise when
          looked at from the top. It needs to follow the NWU axis convention.

          :returns: the current heading of the robot as a Rotation2d. This heading is
                    based on integration of the returned rate from the gyro.
      GetRotation3d:
        doc: Constructs a Rotation3d from the NavX quaternion.
      GetCompassHeading:
        doc: |
          Returns the current tilt-compensated compass heading
          value (in degrees, from 0 to 360) reported by the sensor.

          Note that this value is sensed by a magnetometer,
          which can be affected by nearby magnetic fields (e.g., the
          magnetic fields generated by nearby motors).

          Before using this value, ensure that (a) the magnetometer
          has been calibrated and (b) that a magnetic disturbance is
          not taking place at the instant when the compass heading
          was generated.
          :returns: The current tilt-compensated compass heading, in degrees (0-360).
      ZeroYaw:
        doc: |
          Sets the user-specified yaw offset to the current
          yaw value reported by the sensor.

          This user-specified yaw offset is automatically
          subtracted from subsequent yaw values reported by
          the getYaw() method.
      IsCalibrating:
        doc: |
          Returns true if the sensor is currently performing automatic
          gyro/accelerometer calibration.  Automatic calibration occurs
          when the sensor is initially powered on, during which time the
          sensor should be held still, with the Z-axis pointing up
          (perpendicular to the earth).

          .. note::  During this automatic calibration, the yaw, pitch and roll
                     values returned may not be accurate.

          Once calibration is complete, the sensor will automatically remove
          an internal yaw offset value from all reported values.

          :returns: Returns true if the sensor is currently automatically
                    calibrating the gyro and accelerometer sensors.
      IsConnected:
        doc: |
          Indicates whether the sensor is currently connected
          to the host computer.  A connection is considered established
          whenever communication with the sensor has occurred recently.

          :returns: Returns true if a valid update has been recently received
                    from the sensor.
      GetByteCount:
        doc: |
          Returns the count in bytes of data received from the
          sensor. This could can be useful for diagnosing
          connectivity issues.

          If the byte count is increasing, but the update count
          (see :meth:`getUpdateCount`) is not, this indicates a software
          misconfiguration.

          :returns: The number of bytes received from the sensor.
      GetUpdateCount:
        doc: |
          Returns the count of valid updates which have
          been received from the sensor.  This count should increase
          at the same rate indicated by the configured update rate.

          :returns: The number of valid updates received from the sensor.
      GetLastSensorTimestamp:
        doc: |
          Returns the sensor timestamp corresponding to the
          last sample retrieved from the sensor.  Note that this
          sensor timestamp is only provided when the Register-based
          IO methods (SPI, I2C) are used; sensor timestamps are not
          provided when Serial-based IO methods (TTL UART, USB)
          are used.

          :returns: The sensor timestamp (in ms) corresponding to the
                    current AHRS sensor data.
          :rtype: int
      GetWorldLinearAccelX:
        doc: |
          Returns the current linear acceleration in the X-axis (in G).

          World linear acceleration refers to raw acceleration data, which
          has had the gravity component removed, and which has been rotated to
          the same reference frame as the current yaw value.  The resulting
          value represents the current acceleration in the x-axis of the
          body (e.g., the robot) on which the sensor is mounted.

          :returns: Current world linear acceleration in the X-axis (in G).
      GetWorldLinearAccelY:
        doc: |
          Returns the current linear acceleration in the Y-axis (in G).

          World linear acceleration refers to raw acceleration data, which
          has had the gravity component removed, and which has been rotated to
          the same reference frame as the current yaw value.  The resulting
          value represents the current acceleration in the Y-axis of the
          body (e.g., the robot) on which the sensor is mounted.

          :returns: Current world linear acceleration in the Y-axis (in G).
      GetWorldLinearAccelZ:
        doc: |
          Returns the current linear acceleration in the Z-axis (in G).

          World linear acceleration refers to raw acceleration data, which
          has had the gravity component removed, and which has been rotated to
          the same reference frame as the current yaw value.  The resulting
          value represents the current acceleration in the Z-axis of the
          body (e.g., the robot) on which the sensor is mounted.

          :returns: Current world linear acceleration in the Z-axis (in G).
      IsMoving:
        doc: |
          Indicates if the sensor is currently detecting motion,
          based upon the X and Y-axis world linear acceleration values.
          If the sum of the absolute values of the X and Y axis exceed
          a "motion threshold", the motion state is indicated.

          :returns: Returns true if the sensor is currently detecting motion.
      IsRotating:
        doc: |
          Indicates if the sensor is currently detecting motion,
          based upon the X and Y-axis world linear acceleration values.
          If the sum of the absolute values of the X and Y axis exceed
          a "motion threshold", the motion state is indicated.

          :returns: Returns true if the sensor is currently detecting motion.
      GetBarometricPressure:
        doc: |
          Returns the current barometric pressure, based upon calibrated readings
          from the onboard pressure sensor.  This value is in units of millibar.

          .. note:: This value is only valid for a navX Aero.  To determine
                    whether this value is valid, see :meth:`isAltitudeValid`.

          :returns: Returns current barometric pressure (navX Aero only).
      GetAltitude:
        doc: |
          Returns the current altitude, based upon calibrated readings
          from a barometric pressure sensor, and the currently-configured
          sea-level barometric pressure [navX Aero only].  This value is in units of meters.

          .. note:: This value is only valid sensors including a pressure
                    sensor.  To determine whether this value is valid, see
                    :meth:`isAltitudeValid`.

          :returns: Returns current altitude in meters (as long as the sensor includes
                    an installed on-board pressure sensor).
      IsAltitudeValid:
        doc: |
          Indicates whether the current altitude (and barometric pressure) data is
          valid. This value will only be true for a sensor with an onboard
          pressure sensor installed.

          If this value is false for a board with an installed pressure sensor,
          this indicates a malfunction of the onboard pressure sensor.

          :returns: Returns true if a working pressure sensor is installed.
      GetFusedHeading:
        doc: |
          Returns the "fused" (9-axis) heading.

          The 9-axis heading is the fusion of the yaw angle, the tilt-corrected
          compass heading, and magnetic disturbance detection.  Note that the
          magnetometer calibration procedure is required in order to
          achieve valid 9-axis headings.

          The 9-axis Heading represents the sensor's best estimate of current heading,
          based upon the last known valid Compass Angle, and updated by the change in the
          Yaw Angle since the last known valid Compass Angle.  The last known valid Compass
          Angle is updated whenever a Calibrated Compass Angle is read and the sensor
          has recently rotated less than the Compass Noise Bandwidth (~2 degrees).

          :returns: Fused Heading in Degrees (range 0-360)
      IsMagneticDisturbance:
        doc: |
          Indicates whether the current magnetic field strength diverges from the
          calibrated value for the earth's magnetic field by more than the currently-
          configured Magnetic Disturbance Ratio.

          This function will always return false if the sensor's magnetometer has
          not yet been calibrated (see :meth:`isMagnetometerCalibrated`).

          :returns: true if a magnetic disturbance is detected (or the magnetometer is uncalibrated).
      IsMagnetometerCalibrated:
        doc: |
          Indicates whether the magnetometer has been calibrated.

          Magnetometer Calibration must be performed by the user.

          Note that if this function does indicate the magnetometer is calibrated,
          this does not necessarily mean that the calibration quality is sufficient
          to yield valid compass headings.

          :returns: Returns true if magnetometer calibration has been performed.
      GetQuaternionW:
        doc: |
          Returns the imaginary portion (W) of the Orientation Quaternion which
          fully describes the current sensor orientation with respect to the
          reference angle defined as the angle at which the yaw was last "zeroed".

          Each quaternion value (W,X,Y,Z) is expressed as a value ranging from -2
          to 2.  This total range (4) can be associated with a unit circle, since
          each circle is comprised of 4 PI Radians.

          For more information on Quaternions and their use, please see this
          `definition <https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation>`_.

          :returns: Returns the imaginary portion (W) of the quaternion.
      GetQuaternionX:
        doc: |
          Returns the real portion (X axis) of the Orientation Quaternion which
          fully describes the current sensor orientation with respect to the
          reference angle defined as the angle at which the yaw was last "zeroed".

          Each quaternion value (W,X,Y,Z) is expressed as a value ranging from -2
          to 2.  This total range (4) can be associated with a unit circle, since
          each circle is comprised of 4 PI Radians.

          For more information on Quaternions and their use, please see this
          `definition <https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation>`_.

          :returns: Returns the real portion (X) of the quaternion.
      GetQuaternionY:
        doc: |
          Returns the real portion (Y axis) of the Orientation Quaternion which
          fully describes the current sensor orientation with respect to the
          reference angle defined as the angle at which the yaw was last "zeroed".

          Each quaternion value (W,X,Y,Z) is expressed as a value ranging from -2
          to 2.  This total range (4) can be associated with a unit circle, since
          each circle is comprised of 4 PI Radians.

          For more information on Quaternions and their use, please see:

          https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation

          :returns: Returns the real portion (X) of the quaternion.
      GetQuaternionZ:
        doc: |
          Returns the real portion (Z axis) of the Orientation Quaternion which
          fully describes the current sensor orientation with respect to the
          reference angle defined as the angle at which the yaw was last "zeroed".

          Each quaternion value (W,X,Y,Z) is expressed as a value ranging from -2
          to 2.  This total range (4) can be associated with a unit circle, since
          each circle is comprised of 4 PI Radians.

          For more information on Quaternions and their use, please see:

          https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation

          :returns: Returns the real portion (X) of the quaternion.
      ResetDisplacement:
        doc: |
          Zeros the displacement integration variables.   Invoke this at the moment when
          integration begins.
      UpdateDisplacement:
      GetVelocityX:
        doc: |
          Returns the velocity (in meters/sec) of the X axis [Experimental].

          .. note:: This feature is experimental.  Velocity measures rely on integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting velocities are not known to be very accurate.

          :returns: Current Velocity (in meters/squared).
      GetVelocityY:
        doc: |
          Returns the velocity (in meters/sec) of the Y axis [Experimental].

          .. note:: This feature is experimental.  Velocity measures rely on integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting velocities are not known to be very accurate.

          :returns: Current Velocity (in meters/squared).
      GetVelocityZ:
        doc: |
          Returns the velocity (in meters/sec) of the X axis [Experimental].

          .. note:: This feature is experimental.  Velocity measures rely on integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting velocities are not known to be very accurate.

          :returns: Current Velocity (in meters/squared).
      GetDisplacementX:
        doc: |
          Returns the displacement (in meters) of the X axis since resetDisplacement()
          was last invoked [Experimental].

          .. note:: This feature is experimental.  Displacement measures rely on double-integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting displacement are not known to be very accurate, and the amount of error
                    increases quickly as time progresses.

          :returns: Displacement since last reset (in meters).
      GetDisplacementY:
        doc: |
          Returns the displacement (in meters) of the Y axis since resetDisplacement()
          was last invoked [Experimental].

          .. note:: This feature is experimental.  Displacement measures rely on double-integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting displacement are not known to be very accurate, and the amount of error
                    increases quickly as time progresses.

          :returns: Displacement since last reset (in meters).
      GetDisplacementZ:
        doc: |
          Returns the displacement (in meters) of the Z axis since resetDisplacement()
          was last invoked [Experimental].

          .. note:: This feature is experimental.  Displacement measures rely on double-integration
                    of acceleration values from MEMS accelerometers which yield "noisy" values.  The
                    resulting displacement are not known to be very accurate, and the amount of error
                    increases quickly as time progresses.

          :returns: Displacement since last reset (in meters).
      GetAngle:
        doc: |
          Returns the total accumulated yaw angle (Z Axis, in degrees)
          reported by the sensor.

          .. note:: The angle is continuous, meaning it's range is beyond 360 degrees.
                    This ensures that algorithms that wouldn't want to see a discontinuity
                    in the gyro output as it sweeps past 0 on the second time around.

          Note that the returned yaw value will be offset by a user-specified
          offset value this user-specified offset value is set by
          invoking the zeroYaw() method.

          :returns: The current total accumulated yaw angle (Z axis) of the robot
                    in degrees. This heading is based on integration of the returned rate
                    from the Z-axis (yaw) gyro.
      GetRate:
        doc: |
          Return the rate of rotation of the yaw (Z-axis) gyro, in degrees per second.

          The rate is based on the most recent reading of the yaw gyro angle.

          :returns: The current rate of change in yaw angle (in degrees per second)
      SetAngleAdjustment:
        doc: |
          Sets an amount of angle to be automatically added before returning a
          angle from the :meth:`getAngle` method.  This allows users of the ``getAngle`` method
          to logically rotate the sensor by a given amount of degrees.

          NOTE 1:  The adjustment angle is **only** applied to the value returned
          from ``getAngle`` - it does not adjust the value returned from :meth:`getYaw`, nor
          any of the quaternion values.

          NOTE 2:  The adjustment angle is **not** automatically cleared whenever the
          sensor yaw angle is reset.

          If not set, the default adjustment angle is 0 degrees (no adjustment).

          :param adjustment: Adjustment in degrees (range:  -360 to 360)
      GetAngleAdjustment:
        doc: |
          Returns the currently configured adjustment angle.  See
          :meth:`setAngleAdjustment` for more details.

          If this method returns 0 degrees, no adjustment to the value returned
          via :meth:`getAngle` will occur.
          :returns: adjustment, in degrees (range:  -360 to 360)
      Reset:
        doc: |
          Reset the Yaw gyro.

          Resets the Gyro Z (Yaw) axis to a heading of zero. This can be used if
          there is significant drift in the gyro and it needs to be recalibrated
          after it has been running.
      GetRawGyroX:
        doc: |
          Returns the current raw (unprocessed) X-axis gyro rotation rate (in degrees/sec).

          .. note:: This value is un-processed, and should only be accessed by advanced users.
                      Typically, rotation about the X Axis is referred to as "Pitch".  Calibrated
                      and Integrated Pitch data is accessible via the :meth:`getPitch` method.

          :returns: Returns the current rotation rate (in degrees/sec).
      GetRawGyroY:
        doc: |
          Returns the current raw (unprocessed) Y-axis gyro rotation rate (in degrees/sec).

          .. note:: This value is un-processed, and should only be accessed by advanced users.
                      Typically, rotation about the T Axis is referred to as "Roll".  Calibrated
                      and Integrated Pitch data is accessible via the :meth:`getRoll` method.

          :returns: Returns the current rotation rate (in degrees/sec).
      GetRawGyroZ:
        doc: |
          Returns the current raw (unprocessed) Z-axis gyro rotation rate (in degrees/sec).

          .. note:: This value is un-processed, and should only be accessed by advanced users.
                    Typically, rotation about the T Axis is referred to as "Yaw".  Calibrated
                    and Integrated Pitch data is accessible via the :meth:`getYaw` method.

          :returns: Returns the current rotation rate (in degrees/sec).
      GetRawAccelX:
        doc: |
          Returns the current raw (unprocessed) X-axis acceleration rate (in G).

          .. note:: this value is unprocessed, and should only be accessed by advanced users.  This raw value
                    has not had acceleration due to gravity removed from it, and has not been rotated to
                    the world reference frame.  Gravity-corrected, world reference frame-corrected
                    X axis acceleration data is accessible via the :meth:`getWorldLinearAccelX` method.

          :returns: Returns the current acceleration rate (in G).
      GetRawAccelY:
        doc: |
          Returns the current raw (unprocessed) Y-axis acceleration rate (in G).

          .. note:: this value is unprocessed, and should only be accessed by advanced users.  This raw value
                    has not had acceleration due to gravity removed from it, and has not been rotated to
                    the world reference frame.  Gravity-corrected, world reference frame-corrected
                    Y axis acceleration data is accessible via the :meth:`getWorldLinearAccelY` method.

          :returns: Returns the current acceleration rate (in G).
      GetRawAccelZ:
        doc: |
          Returns the current raw (unprocessed) Z-axis acceleration rate (in G).

          .. note:: this value is unprocessed, and should only be accessed by advanced users.  This raw value
                    has not had acceleration due to gravity removed from it, and has not been rotated to
                    the world reference frame.  Gravity-corrected, world reference frame-corrected
                    Z axis acceleration data is accessible via the :meth:`getWorldLinearAccelZ` method.

          :returns: Returns the current acceleration rate (in G).
      GetRawMagX:
        doc: |
          Returns the current raw (unprocessed) X-axis magnetometer reading (in uTesla).

          .. note::  this value is unprocessed, and should only be accessed by advanced users.  This raw value
                      has not been tilt-corrected, and has not been combined with the other magnetometer axis
                      data to yield a compass heading.  Tilt-corrected compass heading data is accessible
                      via the :meth:`getCompassHeading` method.

          :returns: Returns the mag field strength (in uTesla).
      GetRawMagY:
        doc: |
          Returns the current raw (unprocessed) Y-axis magnetometer reading (in uTesla).

          .. note::  this value is unprocessed, and should only be accessed by advanced users.  This raw value
                      has not been tilt-corrected, and has not been combined with the other magnetometer axis
                      data to yield a compass heading.  Tilt-corrected compass heading data is accessible
                      via the :meth:`getCompassHeading` method.

          :returns: Returns the mag field strength (in uTesla).
      GetRawMagZ:
        doc: |
          Returns the current raw (unprocessed) Z-axis magnetometer reading (in uTesla).

          .. note::  this value is unprocessed, and should only be accessed by advanced users.  This raw value
                      has not been tilt-corrected, and has not been combined with the other magnetometer axis
                      data to yield a compass heading.  Tilt-corrected compass heading data is accessible
                      via the :meth:`getCompassHeading` method.

          :returns: Returns the mag field strength (in uTesla).
      GetPressure:
        doc: |
          Returns the current barometric pressure (in millibar) [navX Aero only].

          This value is valid only if a barometric pressure sensor is onboard.

          :returns: Returns the current barometric pressure (in millibar).
      GetTempC:
        doc: |
          Returns the current temperature (in degrees centigrade) reported by
          the sensor's gyro/accelerometer circuit.

          This value may be useful in order to perform advanced temperature-
          correction of raw gyroscope and accelerometer values.

          :returns: The current temperature (in degrees centigrade).
      GetBoardYawAxis:
        doc: |
          Returns information regarding which sensor board axis (X,Y or Z) and
          direction (up/down) is currently configured to report Yaw (Z) angle
          values.   NOTE:  If the board firmware supports Omnimount, the board yaw
          axis/direction are configurable.

          For more information on Omnimount, please see:

          http://navx-mxp.kauailabs.com/navx-mxp/installation/omnimount/

          :returns: The currently-configured board yaw axis/direction.
      GetFirmwareVersion:
        doc: |
          Returns the version number of the firmware currently executing
          on the sensor.

          To update the firmware to the latest version, please see:

          http://navx-mxp.kauailabs.com/navx-mxp/support/updating-firmware/

          :returns: The firmware version in the format [MajorVersion].[MinorVersion]
      RegisterCallback:
        ignore: true
      DeregisterCallback:
        ignore: true
      GetActualUpdateRate:
        doc: |
          Returns the navX-Model device's currently configured update
          rate.  Note that the update rate that can actually be realized
          is a value evenly divisible by the navX-Model device's internal
          motion processor sample clock (200Hz).  Therefore, the rate that
          is returned may be lower than the requested sample rate.

          The actual sample rate is rounded down to the nearest integer
          that is divisible by the number of Digital Motion Processor clock
          ticks.  For instance, a request for 58 Hertz will result in
          an actual rate of 66Hz (200 / (200 / 58), using integer
          math.

          :returns: Returns the current actual update rate in Hz
                    (cycles per second).
      GetRequestedUpdateRate:
        doc: |
          Returns the currently requested update rate.
          rate.  Note that not every update rate can actually be realized,
          since the actual update rate must be a value evenly divisible by
          the navX-Model device's internal motion processor sample clock (200Hz).

          To determine the actual update rate, use the
          :meth:`getActualUpdateRate` method.

          :returns: Returns the requested update rate in Hz
                    (cycles per second).
      EnableLogging:
        doc: |
          Enables or disables logging (via Console I/O) of AHRS library internal
          behaviors, including events such as transient communication errors.
      EnableBoardlevelYawReset:
        doc: |
          Enables or disables board-level yaw zero (reset) requests.  Board-level
          yaw resets are processed by the sensor board and the resulting yaw
          angle may not be available to the client software until at least
          2 update cycles have occurred.  Board-level yaw resets however do
          maintain synchronization between the yaw angle and the sensor-generated
          Quaternion and Fused Heading values.

          Conversely, Software-based yaw resets occur instantaneously; however, Software-
          based yaw resets do not update the yaw angle component of the sensor-generated
          Quaternion values or the Fused Heading values.
      IsBoardlevelYawResetEnabled:
        doc: |
          Returns true if Board-level yaw resets are enabled.  Conversely, returns false
          if Software-based yaw resets are active.

          :returns: true if Board-level yaw resets are enabled.
      GetGyroFullScaleRangeDPS:
        doc: |
          Returns the sensor full scale range (in degrees per second)
          of the X, Y and X-axis gyroscopes.

          :returns: gyroscope full scale range in degrees/second.
      GetAccelFullScaleRangeG:
        doc: |
          Returns the sensor full scale range (in G)
          of the X, Y and X-axis accelerometers.

          :returns: accelerometer full scale range in G.
      Calibrate:
        doc: |
          Does nothing
  AHRS::BoardYawAxis:
    shared_ptr: true
    attributes:
      board_axis:
      up:
